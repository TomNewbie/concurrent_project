# 1 "insulin_pump.pml"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 384 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "insulin_pump.pml" 2
# 22 "insulin_pump.pml"
int clock_ms
byte blood_sugar = 6;

byte insulin_available = 100;
byte insulin_amount;

mtype = {SUGAR_LOW};
chan status = [0] of {mtype};

active proctype clock_proc()
{
  do
    :: clock_ms == 24 * 60 * 60 * 1000 * 1 -> clock_ms = 0; printf("reset clock");
    :: else -> clock_ms++;
  od
}

inline split_time_digit(time, d1, d2)
{
  if
    :: time < 10 -> d1 = 0; d2 = time;
    :: else -> d1 = time/10; d2 = time%10;
  fi
}

inline LOG_INIT()
{
  byte hour = clock_ms/(60 * 60 * 1000 * 1);
  byte hour1, hour2;
  split_time_digit(hour, hour1, hour2);

  byte minute = (clock_ms - hour * 60 * 60 * 1000 * 1)/(60 * 1000 * 1);
  byte minute1, minute2;
  split_time_digit(minute, minute1, minute2);

  byte second = (clock_ms - hour * 60 * 60 * 1000 * 1 - minute * 60 * 1000 * 1)/(1000 * 1);
  byte second1, second2;
  split_time_digit(second, second1, second2);

  printf("[%d%d:%d%d:%d%d] ", hour1, hour2, minute1, minute2, second1, second2);
}

inline rate_sleep(rate, curr_time, prev_time)
{
  atomic {
    do
      :: curr_time - prev_time >= rate -> prev_time = curr_time; break;
      :: curr_time < prev_time -> prev_time = prev_time - 24 * 60 * 60 * 1000 * 1;
    od
  }
}

inline min(lhs, a, b)
{
  if
    :: a < b -> lhs = a;
    :: else -> lhs = b;
  fi
}


inline max(lhs, a, b)
{
  if
    :: a > b -> lhs = a;
    :: else -> lhs = b;
  fi
}

inline clamp(lhs, rhs, min_value, max_value)
{
  if
    :: rhs < min_value -> lhs = min_value;
    :: rhs > max_value -> lhs = max_value;
    :: else -> lhs = rhs;
  fi
}


inline setUp(r0, r1, r2, out_dose)
{
  r0 = 0;
  r1 = 6;
  r2 = 14;
  out_dose = 0;
}

inline sugar_low(r0, r1, r2, out_dose)
{
  r2 < 6;
  out_dose = 0;

}

inline sugar_ok(r0, r1, r2, out_dose)
{
  r2 >= 6 && r2 <= 14;

  if

    :: r2 <= r1 ->
      out_dose = 0;

    :: r2 > r1 && (r2 - r1) < (r1 - r0) ->
      out_dose = 0


    :: r2 > r1 && (r2 - r1) >= (r1 - r0) ->
      max(out_dose, (r2 - r1) / 4, 1)
  fi
}

inline sugar_high(r0, r1, r2, dose)
{
  r2 > 14;

  if

    :: r2 > r1 ->
      max(compDose, (r2 - r1)/4, 1);

    :: (r2 == r1) -> compDose = 1;

    :: (r2 <= r1 && (r2 - r1 <= r1 - r0)) -> compDose = 0;

    :: else -> compDose = 1;
  fi
}

active proctype controller()
{
  byte compDose;
  int prev_time = clock_ms;
  int r0, r1, r2;
  byte cumDose = 0;
  setUp(r0, r1, r2, compDose);

  do
    :: rate_sleep(10 * 60 * 1000 * 1, clock_ms, prev_time);

      r0 = r1;
      r1 = r2;
      r2 = blood_sugar;

      if
        :: insulin_available >= 4 &&
          cumDose < 25 ->
          atomic { LOG_INIT(); printf("Controller has run for 10 minutes\n"); }
          atomic { LOG_INIT(); printf("Blood level: %d\n", blood_sugar); }
          if
            :: sugar_low(r0, r1, r2, compDose) ->
              atomic { LOG_INIT(); printf("Sugar level is low. Dose=%d\n", compDose); }
            :: sugar_ok(r0, r1, r2, compDose) ->
              atomic { LOG_INIT(); printf("Sugar level is ok. Dose=%d\n", compDose); }
            :: sugar_high(r0, r1, r2, compDose) ->
              atomic { LOG_INIT(); printf("Sugar level is high. Dose=%d\n", compDose); }
          fi


          insulin_amount = insulin_amount + compDose;
          cumDose = cumDose + compDose;
          insulin_available = insulin_available - compDose;

          if
            :: insulin_available <= 4 * 4 -> printf("Insulin low");
            :: else -> skip;
          fi

          atomic { LOG_INIT(); printf("Insulin available: %d\n", insulin_available); }
        :: else -> printf("Exceed cum dose or insulin low");
      fi
  od
}

active proctype blood_sugar_proc()
{
  int prev_time = clock_ms;
  int v, a;

  do
  :: rate_sleep(60 * 1000 * 1, clock_ms, prev_time);

    if
      :: insulin_amount > 0 ->

        a = -3;
        insulin_amount--;
        clamp(v, v + a, -3, 1);
      :: else ->

        select(a: 0..4);
        a = a - 2;
        clamp(v, v + a, -1, 3);
    fi

    clamp(blood_sugar, blood_sugar + v, 1, 40);

    atomic { LOG_INIT(); printf("Blood sugar level: %d, v=%d, a=%d\n", blood_sugar, v, a); }
 od
}

active proctype self_test_unit()
{
  int prev_time = clock_ms;

  do
    :: rate_sleep(30 * 1000 * 1, clock_ms, prev_time);
      atomic { LOG_INIT(); printf("Self test has run for 30 seconds\n"); }
  od
}
